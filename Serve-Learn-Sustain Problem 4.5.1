#In this problem, we're giving you a file containing some real data from
#the Marta (Atlanta's subway system) database. Each line of the file is
#a record of a single ride at a specific Marta station. Riders enter and
#exit the subway system by tapping a Breeze Card against a gate at a
#specific station.
#
#You can see a preview of what the file will look like in
#marta_sample.csv in the dropdown in the top left. Note, however, that
#the real dataset is massive: over 200,000 individual rides are recorded.
#So, you're going to be dealing with some pretty big data!
#
#Each line of the file contains six items, separated by commas:
#
# - the transit day, in MM/DD/YYYY format.
# - the transit time, in HH:MM:SS format.
# - the device ID, an identifer of the gate at which the rider entered.
# - the station ID, a numeric identifier the station.
# - the use type, whether the rider was entering, exiting, etc.
# - a serial number, the unique identifier of the rider's Breeze Card.
#01/18/2016,12:01:08,RVG10405,30,9,3E8CADDB574A4E4A
#01/18/2016,08:01:06,RVG10402,30,9,3E8CADDF4A674E4A
#01/18/2016,16:01:03,RVG10402,30,9,3E8CADF935024E4A

#00	MARTA Training
#01	CTS Test Lab 1
#02	Test Bus Facility
#
#Your goal is to use this file to answer three questions:
#
# - What is the average number of Breeze Card taps per station?
# - What is the station ID of the station whose traffic is the closest
#   to that average?
# - What station has the least overall amount of traffic?
#
#Note that you will answer these questions in the fill-in-the-blank
#problems below, _not_ in this coding exercise. So, you don't have to
#programmatically find the station ID closest to the average: you could
#just print all the stations and their averages, then visually check
#which is closest to the average.
#
#To get you started, we've gone ahead and opened the file:

marta_file = open('../resource/lib/public/marta_01-18-2016.csv', 'r')

#You may add whatever code you want from here on to answer those three
#questions.
#
#HINT: although there are six items on each line of the file, you only
#need one of them: station ID. If you use split(",") to split up each
#line, station ID will be at index 3 on the list.
#
#HINT 2: You'll probably want to use a dictionary, with station IDs as
#the keys and 

station_file = open("stations.txt", "r")

stn_dict = {}
for stn_line in station_file:
    stn_line = stn_line.strip()
    stn_parts = stn_line.split("\t",1)
    stn_dict[stn_parts[0]] = stn_parts[1]

marta_dict = {}
taps_per_stn = {}
count_stn_tap = 0
tap_count = 0
for line in marta_file:
    line = line.strip()
    parts = line.split(",")
       
    if parts[3] not in taps_per_stn:
        taps_per_stn[parts[3]] = 1
        count_stn_tap += 1
    taps_per_stn[parts[3]] += 1
    tap_count += 1

average = tap_count / count_stn_tap    
taps_per_stn = sorted(taps_per_stn.items(), key = lambda item: item[1])  
print(taps_per_stn)
print("tap count:", tap_count)
print("stn tapped:", count_stn_tap)
print("average:", average)
    
#    marta_dict["day"] = parts[0]
#    marta_dict["time"] = parts[1]
#    marta_dict["device"] = parts[2]
#    marta_dict["station"] = parts[3]
#    marta_dict["use_type"] = parts[4]
#    marta_dict["serial"] = parts[5]
#print(marta_dict) 
#output = {'day': '01/18/2016', 'time': '23:01:59', 'device': 'SAG10716', 'station': '33', 'use_type': '1', 'serial': '3E8CADDD31874E4A\n'}
    
#    day, time, device, station, use_type, serial = parts
#    marta_dict = {"day": str(day), "time": str(time), "device": str(device), "station": str(station), "use_type" : str(use_type), "serial" = str(serial)}
